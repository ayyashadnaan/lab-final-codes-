// hasing code
#include <bits/stdc++.h>
using namespace std;

int main()
{   // Tc: O(n)
    int n;
    cin >> n;
    vector<vector<int>> hash(10);
    for (int i = 0; i < n; i++)
    {
        int a;
        cin >> a;
        int x = a % 10;
        hash[x].push_back(a);
    }
    int i = 0;
    for (auto &u : hash)
    {
        if (u.empty())
        {
            cout << "index " << i << "element 0" << endl;
        }
        else
        {
            for (auto &v : u)
            {
                cout << "index " << i << "element " << v << endl;
            }
        }
        i++;
    }
}
// Tc: O(n)

// binary search 
#include <bits/stdc++.h>
using namespace std;
int binary_search(vector<int> &v, int low, int high, int target)
{
    if (low > high)
        return -1;
    int mid = (low + high) / 2;
    if (v[mid] == target)
        return mid;
    else if (v[mid] < target)
        return binary_search(v, mid + 1, high, target);
    else
        return binary_search(v, low, mid - 1, target);
}
int main()
{   //TC:O(n log n)
    int n;
    cin >> n;
    vector<int> v(n);
    for (int i = 0; i < n; i++)
    {
        cin >> v[i];
    }
    sort(v.begin(), v.end());
    int target;
    cin >> target;
    int result = binary_search(v, 0, v.size() - 1, target);
    cout << result << endl;
}


// bubble sort

#include <bits/stdc++.h>
using namespace std;

int main()
{   
   TC:n^2
    int n;
    cin >> n;
    vector<int> v(n);
    for (int i = 0; i < n; i++)
    {
        cin >> v[i];
    }
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n - 1; j++)
        {
            if (v[j] >v[j + 1])
                swap(v[j], v[j + 1]);
        }
    }
    for (auto &u : v)
        cout << u << " ";
}


// insertion sort
#include <bits/stdc++.h>
using namespace std;

int main()
{  
   TC:n^2
    int n;
    cin >> n;
    vector<int> v(n);
    for (int i = 0; i < n; i++)
    {
        cin >> v[i];
    }
    for (int i = 1; i < n; i++)
    {
        int key = v[i];
        int j = i - 1;
        while (j >= 0 && v[j] > key)
        {
            v[j + 1] = v[j];
            j--;
        }
        v[j + 1] = key;
    }
    for (auto u : v)
        cout << u << " ";
}

//fibonacchi series with recursion 
#include <bits/stdc++.h>
using namespace std;
int fib(int n)
{
    if (n == 1)
        return 0;
    if (n == 2)
        return 1;

    return fib(n - 2) + fib(n - 1);
}
int main()
{   
   TC:(2^n)
    int n;
    cin >> n;
    cout << fib(n);
}
// fiboancchi series with dp 
#include <bits/stdc++.h>
using namespace std;

int main()
{

   TC:O(n)
    int n;
    cin >> n;
    
    // Base cases
    if (n == 0)
    {
        cout << 0 << endl;
        return 0;
    }
    if (n == 1)
    {
        cout << 1 << endl;
        return 0;
    }
    
    int a = 0, b = 1;  
    for (int i = 2; i <= n; i++)
    {
        int temp = a + b;
        a = b;
        b = temp;
    }
    
    cout << b << endl; 
    return 0;
}

// factrorial with recursion 
#include <bits/stdc++.h>
using namespace std;

int factorial(int n)
{
    
    if (n == 0 || n == 1)
        return 1;
    return n * factorial(n - 1);  
}

int main()
{   
    TC:O(n)
    int n;
    cin >> n;
    cout << factorial(n);  
}
//factroial with dp 
#include <bits/stdc++.h>
using namespace std;

int factorial(int n)
{
    
    if (n == 0 || n == 1)
        return 1;
    return n * factorial(n - 1);  
}

int main()
{   
   TC:O(n)
    int n;
    cin >> n;
    cout << factorial(n);  
}













